Selecionar a base de dados
use plataforma;

Criar as coleções
db.createCollection("Cursos");
db.createCollection("Alunos");
db.createCollection("Instrutores");
db.createCollection("Inscricoes");

Inserir dados na coleção "Cursos"
db.Cursos.insertMany([
    {
        _id: 1,
        titulo: "NoSQL para iniciantes",
        descricao: "Aprenda NoSQL para aplicar em bancos de dados não relacionais",
        categoria: "Banco de Dados",
        cargaHoraria: 50,
        instrutor: "Anderson"
    },
    {
        _id: 2,
        titulo: "SQLite Expo Snack",
        descricao: "Aprenda a conectar o banco de dados no Expo Snack",
        categoria: "Programação Mobile",
        cargaHoraria: 60,
        instrutor: "Fernando"
    },
    {
        _id: 3,
        titulo: "Trazer dados de uma API",
        descricao: "Aprenda a conectar uma API e colocar as informações no seu próprio site",
        categoria: "API",
        cargaHoraria: 45,
        instrutor: "Davi"
    }
]);

Inserir documentos na coleção "Alunos"
db.Alunos.insertMany([
    {
        _id: 1,
        nome: "Samuel",
        email: "samuel@gmail.com",
        cursosInscritos: ["Trazer dados de uma API"],
        progresso: "75%"
    },
    {
        _id: 2,
        nome: "Vitor",
        email: "vitor@gmail.com",
        cursosInscritos: ["SQLite Expo Snack"],
        progresso: "79%"
    }
]);

Inserir documentos na coleção "Instrutores"
db.Instrutores.insertMany([
    {
        _id: 1,
        nome: "Anderson",
        especialidade: "Banco de Dados",
        cursosMinistrados: ["NoSQL para iniciantes"],
        avaliacaoMedia: 9.5
    },
    {
        _id: 2,
        nome: "Davi",
        especialidade: "Programação Web",
        cursosMinistrados: ["Trazer dados de uma API"],
        avaliacaoMedia: 9.4
    },
    {
        _id: 3,
        nome: "Fernando",
        especialidade: "Programação Mobile",
        cursosMinistrados: ["SQLite Expo Snack"],
        avaliacaoMedia: 9.9
    }
]);

Inserir documentos na coleção "Inscricoes"
db.Inscricoes.insertMany([
    {
        _id: 1,
        aluno: "Vitor",
        curso: "SQLite Expo Snack",
        dataInscricao: "2025-06-01",
        status: "Ativo"
    },
    {
        _id: 2,
        aluno: "Samuel",
        curso: "NoSQL para iniciantes",
        dataInscricao: "2025-04-01",
        status: "Ativo"
    },
    {
        _id: 3,
        aluno: "Pyethra",
        curso: "Trazer dados de uma API",
        dataInscricao: "2025-07-01",
        status: "Concluído"
    }
]);

Consultando os detalhes do curso
db.Cursos.findOne({ titulo: "SQLite Expo Snack" });
findOne: É usado para buscar um único documento que satisfaça a condição fornecida. Usei aqui porque você está procurando um único curso específico, com o título "SQLite Expo Snack".
{ titulo: "SQLite Expo Snack" }: Este é o filtro que busca um curso com o título exato "SQLite Expo Snack". A consulta retorna o primeiro curso que corresponde a esse título.


Consultando os alunos inscritos no curso
db.Alunos.find({ cursosInscritos: "SQLite Expo Snack" });
find: O find retorna múltiplos documentos. Usei porque você quer todos os alunos que estão inscritos no curso "SQLite Expo Snack".
{ cursosInscritos: "SQLite Expo Snack" }: O filtro aqui é para verificar se o campo cursosInscritos de cada aluno contém o valor "SQLite Expo Snack". A consulta retorna todos os alunos que estão inscritos nesse curso.

Consultando o instrutor responsável
db.Instrutores.findOne({ nome: "Fernando" });
findOne: Assim como no exemplo do curso, o findOne é utilizado porque você quer apenas um instrutor, o que é uma busca única.
{ nome: "Fernando" }: A busca é feita pelo nome do instrutor, retornando o primeiro documento correspondente ao nome "Fernando".

Consultando os alunos inscritos em um curso específico
db.Alunos.find({ cursosInscritos: "SQLite Expo Snack" });
find: Usado para retornar todos os alunos que estão inscritos no curso "SQLite Expo Snack"

Consultando todos os cursos em que um aluno específico está inscrito e seu progresso em cada um.
db.Alunos.findOne({ nome: "Vitor" }, 
{ 
_id: 0,
nome: 1,
cursosInscritos: 1,
progresso: 1
});
findOne: A consulta é feita para encontrar um único aluno pelo nome.
{ _id: 0, nome: 1, cursosInscritos: 1, progresso: 1 }: Esse filtro projeta os campos que você quer exibir. O campo _id é excluído (0), e os campos nome, cursosInscritos, e progresso são incluídos. Isso ajuda a retornar somente as informações necessárias sobre o aluno, sem sobrecarregar a consulta com dados desnecessários.

Obtendo detalhes de um instrutor, incluindo cursos ministrados e avaliação média.
db.Instrutores.findOne({ nome: "Fernando" },
{
_id: 0,
nome: 1,
cursosMinistrados: 1,
avaliacaoMedia: 1
});
findOne: Busca o primeiro instrutor que tenha o nome "Fernando".
{ _id: 0, nome: 1, cursosMinistrados: 1, avaliacaoMedia: 1 }: Similar ao exemplo anterior, estamos projetando somente os campos necessários para exibir informações sobre o instrutor, o que torna a consulta mais eficiente.

Atualizando informações do curso, como carga horária ou descrição.
db.Cursos.updateOne({ titulo: "SQLite Expo Snack" },
{ 
$set:
{ 
descricao: "Aprenda a conectar o banco de dados no Expo Snack com foco em performance",  carga_Horaria: 70
}});
updateOne: Usado para atualizar um único documento (curso) que corresponde ao título "SQLite Expo Snack". A função atualiza apenas o primeiro curso encontrado que corresponde à condição.
$set: O operador $set é usado para atualizar os campos específicos que você deseja modificar. Aqui, ele altera a descrição e a carga horária do curso.

Atualizando dados de contato de um aluno.
db.Aluno.updateOne({ nome: "Samuel" },
{ 
$set: { 
email: "samuel.novoemail@gmail.com"
}});
updateOne: Assim como no exemplo anterior, o updateOne é utilizado porque queremos atualizar apenas um aluno específico (Samuel).
$set: Usado para alterar o campo email do aluno para o novo valor fornecido.

Alterando o progresso de um aluno em um curso (percentual concluído).
db.Aluno.updateOne({ nome: "Samuel", cursos_Inscritos: "Trazer dados de uma API" },
{
$set: { progresso: "85%"}
});
updateOne: Atualiza o progresso de um aluno específico no curso "Trazer dados de uma API".
$set: O operador $set é usado novamente para alterar o valor do campo progresso do aluno para "85%".

Removendo um curso do catálogo (se nenhum aluno estiver inscrito).
db.Cursos.deleteOne({ _id: 1, _id: { $nin: db.Inscricao.distinct("Curso") } });
deleteOne: O deleteOne é utilizado para excluir um curso da coleção Cursos. Ele remove o primeiro curso que satisfaça a condição fornecida.
$nin: O operador $nin verifica se o campo _id do curso não está na lista de cursos presentes na coleção Inscricao (usando distinct para pegar apenas os cursos).
distinct("Curso"): Retorna todos os cursos distintos em que há inscrições. A consulta exclui o curso se ele não estiver presente.

Excluindo alunos inativos (sem participação por mais de um ano).
db.Aluno.deleteMany(
{
_id: {
$nin: db.Inscricao.find({ dt_inscr: { $gte: new Date(“2023-11-18”) } }).map(inscricao => inscricao.Aluno)
}});
deleteMany: Usado para excluir múltiplos alunos.
$nin: O operador $nin exclui os alunos que não estão nas inscrições feitas nos últimos 12 meses (a partir de 2023-11-18).
map(inscricao => inscricao.Aluno): Extrai os alunos das inscrições válidas, com data de inscrição recente.

Removendo instrutores que não ministram mais cursos.
db.Instrutor.deleteMany({
Cursos_Ministrados: { $size: 0 }
});
deleteMany: Remove todos os instrutores que não têm cursos ministrados.
$size: 0: Esse operador verifica se o campo Cursos_Ministrados tem tamanho 0, ou seja, o instrutor não ministra nenhum curso.

Listando instrutores com as melhores avaliações.
db.Instrutor.find().sort({ Avaliacao_Media: -1 });
find: Retorna todos os instrutores na coleção.
sort({ Avaliacao_Media: -1 }): A função sort ordena os instrutores com base na avaliação média, de forma decrescente (-1).
